/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project4;

import ca.pfv.spmf.algorithms.sequentialpatterns.clospan_AGP.AlgoCloSpan;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Method;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import static javax.swing.Action.NAME;
import static javax.swing.Action.SHORT_DESCRIPTION;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import logfile.LogFields;
import logfile.Preprocess;

/**
 *
 * @author proxc
 */
public class MainGuiClass extends javax.swing.JFrame {

    public static String SPMF_VERSION = "0.96k";
    final JFileChooser jf;
    File input_file;
    File output_file;

    public MainGuiClass() {
        this.jf = new JFileChooser();

        initComponents();
        System.setOut(new PrintStream(new TextAreaOutputStream(textArea)));
    }

    /**
     * Creates new form Home41
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jSeparator4 = new javax.swing.JSeparator();
        LogfilePath = new javax.swing.JTextField();
        OutputPath = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        Run = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel13 = new javax.swing.JLabel();
        textFieldParam1 = new javax.swing.JTextField();
        jSeparator7 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        InputButton = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        OutputButton = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(850, 550));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("CloSpan Algorithm");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 380, 50));

        jPanel1.setBackground(new java.awt.Color(36, 47, 65));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBackground(new java.awt.Color(36, 47, 65));

        jSeparator4.setForeground(new java.awt.Color(255, 255, 255));

        LogfilePath.setEditable(false);
        LogfilePath.setBackground(new java.awt.Color(36, 47, 65));
        LogfilePath.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        LogfilePath.setForeground(new java.awt.Color(255, 255, 255));
        LogfilePath.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        LogfilePath.setText(" Web log File Path");
        LogfilePath.setBorder(null);
        LogfilePath.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        LogfilePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogfilePathActionPerformed(evt);
            }
        });

        OutputPath.setEditable(false);
        OutputPath.setBackground(new java.awt.Color(36, 47, 65));
        OutputPath.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        OutputPath.setForeground(new java.awt.Color(255, 255, 255));
        OutputPath.setText("Output file for spmf");
        OutputPath.setBorder(null);
        OutputPath.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        OutputPath.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OutputPathFocusGained(evt);
            }
        });
        OutputPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputPathActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(97, 212, 195));
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
        });
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Run.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        Run.setForeground(new java.awt.Color(255, 255, 255));
        Run.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Run.setText("Run Algorithm");
        Run.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Run.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                RunFocusGained(evt);
            }
        });
        Run.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RunMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                RunMouseReleased(evt);
            }
        });
        jPanel3.add(Run, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, -1, 140, 40));

        jLabel11.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("OUTPUT FILE");

        jSeparator6.setForeground(new java.awt.Color(255, 255, 255));

        jLabel13.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("MinSup");

        textFieldParam1.setBackground(new java.awt.Color(36, 47, 65));
        textFieldParam1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        textFieldParam1.setForeground(new java.awt.Color(255, 255, 255));
        textFieldParam1.setText("Eg:0.2 (or) 20%");
        textFieldParam1.setBorder(null);
        textFieldParam1.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        textFieldParam1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldParam1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldParam1FocusLost(evt);
            }
        });
        textFieldParam1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldParam1ActionPerformed(evt);
            }
        });

        jSeparator7.setForeground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("INPUT FILE");

        jPanel2.setBackground(new java.awt.Color(97, 212, 195));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        InputButton.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        InputButton.setForeground(new java.awt.Color(255, 255, 255));
        InputButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        InputButton.setText("Browse File");
        InputButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        InputButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                InputButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                InputButtonMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                InputButtonMouseReleased(evt);
            }
        });
        jPanel2.add(InputButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 2, 100, 30));

        jPanel4.setBackground(new java.awt.Color(97, 212, 195));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        OutputButton.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        OutputButton.setForeground(new java.awt.Color(255, 255, 255));
        OutputButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        OutputButton.setText("Browse File");
        OutputButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        OutputButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                OutputButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                OutputButtonMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                OutputButtonMouseReleased(evt);
            }
        });
        jPanel4.add(OutputButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 2, 100, 30));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel13))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel6))))
                .addGap(54, 54, 54)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldParam1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LogfilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OutputPath, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 10, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(194, 194, 194)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(LogfilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addGap(0, 0, 0)
                                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(53, 53, 53)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(OutputPath))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(57, 57, 57)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textFieldParam1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 50, 540, 360));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("SPMF");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 150, 60));

        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        textArea.setForeground(new java.awt.Color(36, 47, 65));
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 420, 840, 130));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("X");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel1MouseReleased(evt);
            }
        });
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 0, 40, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 842, 551));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseClicked
        // TODO add your handling code here:

        toFront();
    }//GEN-LAST:event_jPanel3MouseClicked

    private void RunMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RunMouseClicked
        // TODO add your handling code here:
        jPanel3.setBackground(Color.red);
    }//GEN-LAST:event_RunMouseClicked

    private void OutputPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OutputPathActionPerformed

    private void OutputPathFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OutputPathFocusGained
        // TODO add your handling code here:
        OutputPath.setText("");
    }//GEN-LAST:event_OutputPathFocusGained

    private void textFieldParam1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldParam1FocusGained
        // TODO add your handling code here:
        textFieldParam1.setText("");
    }//GEN-LAST:event_textFieldParam1FocusGained

    private void textFieldParam1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldParam1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldParam1ActionPerformed

    private void InputButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InputButtonMouseReleased
        // TODO add your handling code here:

        int returnvalue = jf.showOpenDialog(MainGuiClass.this);
        if (returnvalue == JFileChooser.APPROVE_OPTION) {
            input_file = jf.getSelectedFile();
            LogfilePath.setText(input_file.getPath());
        }
    }//GEN-LAST:event_InputButtonMouseReleased

    private void LogfilePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogfilePathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LogfilePathActionPerformed

    private void OutputButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OutputButtonMouseReleased
        // TODO add your handling code here:
        int returnvalue = jf.showOpenDialog(MainGuiClass.this);
        if (returnvalue == JFileChooser.APPROVE_OPTION) {
            output_file = jf.getSelectedFile();
            OutputPath.setText(output_file.getPath());
        }
    }//GEN-LAST:event_OutputButtonMouseReleased

    private void jLabel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseReleased
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jLabel1MouseReleased

    private void RunMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RunMouseReleased
        try {
            // TODO add your handling code here:
            processRunAlgorithmCommandFromGUI();
        } catch (IOException ex) {
            Logger.getLogger(MainGuiClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex)
        
        
        {
            Logger.getLogger(MainGuiClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(MainGuiClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_RunMouseReleased

    private void textFieldParam1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldParam1FocusLost
        // TODO add your handling code here:
        if (textFieldParam1.getText().equalsIgnoreCase("")) {
            textFieldParam1.setText("Eg:0.2 (or) 20%");
        }
    }//GEN-LAST:event_textFieldParam1FocusLost

    private void RunFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_RunFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_RunFocusGained

    private void InputButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InputButtonMouseEntered
        // TODO add your handling code here:
        jPanel2.setBackground(Color.red);
    }//GEN-LAST:event_InputButtonMouseEntered

    private void InputButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InputButtonMouseExited
        // TODO add your handling code here:
        jPanel2.setBackground(new java.awt.Color(97,212,195));
    }//GEN-LAST:event_InputButtonMouseExited

    private void OutputButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OutputButtonMouseEntered
        // TODO add your handling code here:
        jPanel4.setBackground(Color.red);
    }//GEN-LAST:event_OutputButtonMouseEntered

    private void OutputButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OutputButtonMouseExited
        // TODO add your handling code here:
        jPanel4.setBackground(new java.awt.Color(97,212,195));
    }//GEN-LAST:event_OutputButtonMouseExited

    /**
     * Method to convert a parameter given as a string to a double. For example,
     * convert something like "50%" to 0.5.
     *
     * @param value a string
     * @return a double
     */
    private static double getParamAsDouble(String value) {
        if (value.contains("%")) {
            value = value.substring(0, value.length() - 1);
            return Double.parseDouble(value) / 100d;
        }
        return Double.parseDouble(value);
    }

    /**
     * Method to transform a string to an integer
     *
     * @param value a string
     * @return an integer
     */
    private static int getParamAsInteger(String value) {
        return Integer.parseInt(value);
    }

    /**
     * Method to get a parameter as a string. Note: this method just return the
     * string taken as parameter.
     *
     * @param value a string
     * @return a string
     */
    private static String getParamAsString(String value) {
        return value;
    }

    /**
     * Hide all parameters from the user interface. This is used to hide fields
     * when the user change algorithms or when the JFrame is first created.
     */
    static class TextAreaOutputStream extends OutputStream {

        JTextArea textArea;

        public TextAreaOutputStream(JTextArea textArea) {
            this.textArea = textArea;
        }

        public void flush() {
            textArea.repaint();
        }

        public void write(int b) {
            textArea.append(new String(new byte[]{(byte) b}));
        }
    }

    private static class SwingAction extends AbstractAction {

        public SwingAction() {
            putValue(NAME, "SwingAction");
            putValue(SHORT_DESCRIPTION, "Some short description");
        }

        public void actionPerformed(ActionEvent e) {
        }
    }

    /**
     * This method open a URL in the default web browser.
     *
     * @param url : URL of the webpage
     */
    private void openWebPage(String url) {
        try {
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));
        } catch (java.io.IOException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * This method run an algorithm. It is called from the GUI interface or when
     * the user run the jar file from the command line.
     *
     * @param algorithmName the name of the algorithm
     * @param inputFile the input file for the algorithm
     * @param outputFile the output file for the algorithm
     * @param parameters the parameters of the algorithm
     * @return true if no error occured
     */
    private static boolean runAlgorithm(String algorithmName, String inputFile, String outputFile, String[] parameters) {
//		System.out.println("C" + algorithmName);

        try {
            // **** CHECK IF ARFF AS INPUT FILE *****
            // FIRST WE WILL CHECK IF IT IS AN ARFF FILE...
            // IF YES, WE WILL CONVERT IT TO SPMF FORMAT FIRST,
            // THEN WE WILL RUN THE ALGORITHM, AND FINALLY CONVERT THE RESULT SO THAT IT CAN
            // BE SHOWED TO THE USER.
            // This map is to store the mapping from ItemID to Attribute value for the conversion
            // from ARFF to SPMF.
            Map<Integer, String> mapItemAttributeValue = null;
            // This variable store the path of the original output file
            String originalOutputFile = null;
            // This variable store the path of the original input file
            String originalInputFile = null;
            // If the file is ARFF
          

            // ****** NEXT WE WILL APPLY THE DESIRED ALGORITHM ******
            // There is a if condition for each algorithm.
            // I will not describe them one by one because it is
            // straightforward.
            if ("CloSpan".equals(algorithmName)) {
                ca.pfv.spmf.algorithms.sequentialpatterns.clospan_AGP.items.creators.AbstractionCreator abstractionCreator = ca.pfv.spmf.algorithms.sequentialpatterns.clospan_AGP.items.creators.AbstractionCreator_Qualitative.getInstance();

                double minSupport = getParamAsDouble(parameters[0]);

                AlgoCloSpan algo = new AlgoCloSpan(minSupport, abstractionCreator, true, true);

                /*
                 * if("".equals(parameters[1]) == false){
                 * algo.setMaximumPatternLength(getParamAsInteger(parameters[1]));
				}
                 */
                ca.pfv.spmf.algorithms.sequentialpatterns.clospan_AGP.items.SequenceDatabase sd = new ca.pfv.spmf.algorithms.sequentialpatterns.clospan_AGP.items.SequenceDatabase();
                sd.loadFile(inputFile, minSupport);

                algo.runAlgorithm(sd, true, false, outputFile);
                System.out.println(algo.printStatistics());

                /////////////////////////////////////////////////////////////end adding by Antonio Gomariz//////////////////////////////////////////////////////////
            }

            // IF THE FILE WAS AN ARFF FILE, WE NEED TO CONVERT BACK THE RESULT
            // SO THAT IT IS PRESENTED IN TERMS OF VALUES
           
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null,
                    "Error. Please check the parameters of the algorithm.  The format for numbers is incorrect. \n"
                    + "\n ERROR MESSAGE = " + e.toString(), "Error",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        } catch (Throwable e) {
            JOptionPane.showMessageDialog(null,
                    "An error while trying to run the algorithm. \n ERROR MESSAGE = " + e.toString(), "Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return false;
        }
        return true;
    }

    /**
     * This method process the command line arguments when the spmf.jar file is
     * called from the command line.
     *
     * @param args command line arguments.
     */
    public static void processCommandLineArguments(String[] args) {
        //java -Xmx1024m -jar spmfGUIv090b.jar run PrefixSpan /home/ph/Bureau/contextPrefixSpan.txt /home/ph/Bureau/test3.txt 60%
        //java -Xmx1024m -jar spmfGUIv090b.jar run PrefixSpan contextPrefixSpan.txt test3.txt 60%
//		System.out.println(" \n\n-- SPMF version " + SPMF_VERSION + " --\n\n");

        // "version" --> show the current version
        if ("version".equals(args[0])) {
            System.out.println(" \n-- SPMF version " + SPMF_VERSION + " --\n");
        } // "help" --> show the link to read the documentation
        else if ("help".equals(args[0])) {
            System.out.println("\n\nFor help, please check the documentation section of the SPMF website: http://philippe-fournier-viger.com/spmf/ \n\n");
        } //"run" -->  the user wants to run an algorithm
        else if ("run".equals(args[0])) {
            // We get the parameters :
            String algoName = args[1]; // algorithm name
            String input = args[2];  // input file
            String output = args[3]; // output file
            // create an array to store the parameters of the algorithm
            String parameters[] = new String[args.length - 4];
            // copy the arguments in the array of parameters:
            if (args.length > 4) {
                System.arraycopy(args, 4, parameters, 0, args.length - 4);
            }
            // run the algorithm:
            runAlgorithm(algoName, input, output, parameters);
        } // "test" --> this is to run a test file for developers only.
        else if ("test".equals(args[0])) {
            String testName = args[1];
            try {
                Class testClass = Class.forName("ca.pfv.spmf.tests." + testName);
                Method mainMethod = testClass.getMethod("main", String[].class);
                String[] params = null;
                mainMethod.invoke(null, (Object) params);
            } catch (Exception e) {
                e.printStackTrace();
            }

        } else {
            // if any other commands that we don't recognize,
            // we show this:
            System.out.println("\n\n Command not recognized.\n For help, please check the documentation section of the SPMF website: http://philippe-fournier-viger.com/spmf/ \n \n");
        }
    }

    /**
     * This method show the help webpage for a given algorithm in the default
     * browser of the user.
     *
     * @param choice the algorithm name (e.g. "PrefixSpan")
     */
    private void openHelpWebPageForAlgorithm(String choice) {

        openWebPage("http://www.philippe-fournier-viger.com/spmf/index.php?link=documentation.php#clospan");

    }

    private void processRunAlgorithmCommandFromGUI() throws FileNotFoundException, IOException, ClassNotFoundException, SQLException {
        // Get the parameters
        String choice = "CloSpan";
        String parameters[] = new String[1];
        parameters[0] = textFieldParam1.getText();

        textArea.setText("");

        // run the selected algorithm
        LogFields logfield = new LogFields();
        System.out.println("Running clospan algorithm...............");
        File f = logfield.logfieldmethod(input_file.getAbsolutePath());

        boolean succeed = runAlgorithm(choice, f.getAbsolutePath(), output_file.getAbsolutePath(), parameters);  // END IF - CHECBOX
     
        if (succeed) {
            Preprocess proc=new Preprocess();
            FileReader fr = new FileReader(output_file);
            BufferedReader br = new BufferedReader(fr);
             ResultWindow nf = new ResultWindow();
             Connection con=logfield.getConnection();
             Statement stmt = con.createStatement();
                        String line; 
             String tablequery ;
            while ((line = br.readLine()) != null) {
                StringTokenizer Splitter = new StringTokenizer(line, " "); 
                String uline ="";
                while(Splitter.hasMoreTokens()){
                    String s=Splitter.nextToken();
                    if(s=="-1" )
                        continue;
                    if(s.startsWith("#SUP")){
                        uline+="  "+s;
                        break;
                    }
                    tablequery="select URL FROM UrlMapperData where rownum=1 and URLID LIKE "+s;
                    ResultSet rs=stmt.executeQuery(tablequery);
                    while(rs.next()){
                    uline+=proc.clobToString(rs.getClob(1))+" ";
                    }
                  
                }
                
                nf.textArea.append(uline+"\n");
                
            }
          
                   
                   
                   
          //  nf.textArea.read(br, null);
            br.close();
            nf.setVisible(true);
            nf.textArea.requestFocus();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGuiClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGuiClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGuiClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGuiClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGuiClass().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel InputButton;
    private javax.swing.JTextField LogfilePath;
    private javax.swing.JLabel OutputButton;
    private javax.swing.JTextField OutputPath;
    private javax.swing.JLabel Run;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField textFieldParam1;
    // End of variables declaration//GEN-END:variables
}
