source('~/workspace/spmf/RCaller/Vikamine.R')
source('~/.active-rstudio-document')
source('~/workspace/spmf/RCaller/Vikamine.R')
source('~/workspace/spmf/RCaller/Vikamine.R')
source('~/workspace/spmf/RCaller/Vikamine.R')
source('~/workspace/spmf/RCaller/Vikamine.R')
source('~/.active-rstudio-document')
source('~/workspace/spmf/RCaller/Vikamine.R')
source('~/.active-rstudio-document')
source('~/workspace/spmf/RCaller/Vikamine.R')
source('~/workspace/spmf/RCaller/Vikamine.R')
source('~/.active-rstudio-document')
require(rJava)
.jinit(parameters="-Xmx8000m")
.jinit(parameters="-Xmx3000m")
.jinit(parameters="-Xmx8000m")
?.jinit
?subgroup
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("JournalPrincipal", "0L"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 30, minsize = 100, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("JournalCode", "RAN"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 30, minsize = 100, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("JournalCode", "RAN"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 30, minsize = 100, qf = "wracc", postfilter = "min-improve-set"))
SCC324_319472775FEC20121231 <- read.delim("~/FEC/SCC324_319472775FEC20121231.csv", dec=",")
View(SCC324_319472775FEC20121231)
SCC324_319472775FEC20121231$Debit <- ifelse(SCC324_319472775FEC20121231$Debit==0,F,T)
SCC324_319472775FEC20121231$Credit <- ifelse(SCC324_319472775FEC20121231$Credit==0,F,T)
View(SCC324_319472775FEC20121231)
toDelete <- c("Débit","Crédit", "Solde", "Chrono", "EcritureNum", "COUNT1", "CompteLib", "EcritureLib", "JournalPrincipal", "JournalLib")
SCC324_319472775FEC20121231 <- SCC324_319472775FEC20121231[,!(names(SCC324_319472775FEC20121231) %in% toDelete)]
View(SCC324_319472775FEC20121231)
toDelete <- c("Débit","Crédit", "Solde", "Chrono", "EcritureNum", "COUNT1", "CompteLib", "EcritureLib", "JournalPrincipal", "JournalLib", "CompAuxLib")
data <- data[,!(names(data) %in% toDelete)]
write.arff(SCC324_319472775FEC20121231, "/home/geantvert/toto.arff")
View(SCC324_319472775FEC20121231)
?subgroup
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("JournalCode", "RAN"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
SCC324_319472775FEC20121231[,col_names] <- lapply(SCC324_319472775FEC20121231[,col_names] , factor)
namesToKeep <- sapply(SCC324_319472775FEC20121231,function(x) length(unique(x)))
SCC324_319472775FEC20121231 <- subset(SCC324_319472775FEC20121231, select=namesToKeep>1)
col_names <- names(data)
data[,col_names] <- lapply(data[,col_names] , factor)
View(SCC324_319472775FEC20121231)
?level
?levels
levels(SCC324_319472775FEC20121231$Partenaire)
write.arff(SCC324_319472775FEC20121231, "/home/geantvert/toto.arff")
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("JournalCode", "RAN"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
toDelete <- c("Débit","Crédit", "Solde", "Chrono", "EcritureNum", "COUNT1", "CompteLib", "EcritureLib", "JournalPrincipal", "JournalLib", "CompteAuxLib")
SCC324_319472775FEC20121231 <- SCC324_319472775FEC20121231[,!(names(SCC324_319472775FEC20121231) %in% toDelete)]
View(SCC324_319472775FEC20121231)
toDelete <- c("Débit","Crédit", "Solde", "Chrono", "EcritureNum", "COUNT1", "CompteLib", "EcritureLib", "JournalPrincipal", "JournalLib", "CompAuxLib")
SCC324_319472775FEC20121231 <- SCC324_319472775FEC20121231[,!(names(SCC324_319472775FEC20121231) %in% toDelete)]
View(SCC324_319472775FEC20121231)
write.arff(SCC324_319472775FEC20121231, "/home/geantvert/toto.arff")
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("JournalCode", "RAN"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
col_names <- names(SCC324_319472775FEC20121231)
SCC324_319472775FEC20121231[,col_names] <- lapply(SCC324_319472775FEC20121231[,col_names] , factor)
write.arff(SCC324_319472775FEC20121231, "/home/geantvert/toto.arff")
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("JournalCode", "RAN"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto2.arff", as.target("JournalCode", "RAN"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto2.arff", as.target("JournalCode", "RAN"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto2.arff", as.target("JournalCode", "RAN"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto2.arff", as.target("JournalCode", "RAN"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto2.arff", as.target("JournalCode", "RAN"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
?CreateSDTask
DiscoverSubgroupsByTask(task)
task <- CreateSDTask("/home/geantvert/test.arff", as.target("JournalCode", "RAN"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
u <- read.arff("/home/geantvert/test.arff")
View(u)
task <- CreateSDTask("/home/geantvert/test.arff", as.target("Toto", "RAN"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
u
gsub("\\s","", u)
?gsub
gsub("","", u, fixed = TRUE)
gsub("","", u)
sub("\\s", "", u)
gsub("","", "u d")
gsub(" ","", "u d")
gsub(" ","", u)
a <- gsub(" ","", u)
str(a)
u
View(u)
u <- read.arff("/home/geantvert/test.arff")
View(u)
str(u)
gsub(" ","", u)
str(u)
bob <- data.frame(lapply(u, as.character), stringsAsFactors=FALSE)
View(bob)
str(bob)
gsub(" ","", bob)
View(bob)
str(bob)
gsub(" ","", bob)
bob <- gsub(" ","", bob)
str(bob)
bob <- data.frame(bob)
View(bob)
bob <- data.frame(lapply(u, as.character), stringsAsFactors=FALSE)
bob
sub(" ","", bob)
test <- as.data.frame(lapply(bob,gsub("a","new",x) ))
test <- as.data.frame(lapply(bob,gsub("a","new",bob) ))
test2 <- as.data.frame(lapply(test,function(x) if(is.character(x)|is.factor(x)) gsub(" ","",x) else x))
test2 <- as.data.frame(lapply(bob,function(x) if(is.character(x)|is.factor(x)) gsub(" ","",x) else x))
View(test2)
str(test2)
SCC324_319472775FEC20121231 <- as.data.frame(lapply(SCC324_319472775FEC20121231,function(x) if(is.character(x)|is.factor(x)) gsub(" ","",x) else x))
View(SCC324_319472775FEC20121231)
write.arff(SCC324_319472775FEC20121231, "/home/geantvert/toto.arff")
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("JournalCode", "RAN"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
?CreateSDTask
DiscoverSubgroupsByTask(task)
rules <- DiscoverSubgroupsByTask(task)
str(rules)
?DiscoverSubgroupsByTask
data(credit.data)
task <- CreateSDTask(credit.data, as.target("class", "bad"))
taskNum <- CreateSDTask(credit.data, as.target("credit_amount"))
# running the tasks
DiscoverSubgroupsByTask(task)
DiscoverSubgroupsByTask(taskNum)
rules
rules
View(SCC324_319472775FEC20121231)
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
DiscoverSubgroupsByTask(task)
DiscoverSubgroupsByTask(task)
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
.jinit( parameters="-Xmx8000m")
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "408500"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
detach("package:subgroup", unload=TRUE)
remove.packages("subgroup", lib="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("~/Downloads/subgroup_0.2.tar.gz", repos = NULL, type = "source")
library("subgroup", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
library("subgroup", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
?subgroup
?subgroup
library("subgroup", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
?subgroup
# Read CSV
SCC324_319472775FEC20121231 <- read.delim("~/FEC/SCC324_319472775FEC20121231.csv", dec=",")
#replace values
SCC324_319472775FEC20121231$Debit <- ifelse(SCC324_319472775FEC20121231$Debit==0,F,T)
SCC324_319472775FEC20121231$Credit <- ifelse(SCC324_319472775FEC20121231$Credit==0,F,T)
#delete some columns
toDelete <- c("Débit","Crédit", "Solde", "Chrono", "EcritureNum", "COUNT1", "CompteLib", "EcritureLib", "JournalPrincipal", "JournalLib", "CompAuxLib")
SCC324_319472775FEC20121231 <- SCC324_319472775FEC20121231[,!(names(SCC324_319472775FEC20121231) %in% toDelete)]
#remove univalue columns
namesToKeep <- sapply(SCC324_319472775FEC20121231,function(x) length(unique(x)))
SCC324_319472775FEC20121231 <- subset(SCC324_319472775FEC20121231, select=namesToKeep > 1)
#transform each column to a Factor
col_names <- names(SCC324_319472775FEC20121231)
SCC324_319472775FEC20121231[,col_names] <- lapply(SCC324_319472775FEC20121231[,col_names] , factor)
# remove spaces from factors and String columns
SCC324_319472775FEC20121231 <- as.data.frame(lapply(SCC324_319472775FEC20121231,function(x) if(is.character(x)|is.factor(x)) gsub(" ","",x) else x))
#write file to the HD
write.arff(SCC324_319472775FEC20121231, "/home/geantvert/toto.arff")
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
.jinit( parameters="-Xmx8000m")
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
.jaddClassPath("/home/geantvert/R/x86_64-pc-linux-gnu-library/3.0/subgroup/java/subgroup.jar")
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
?subgroup
DiscoverSubgroupsByTask(task)
detach("package:subgroup", unload=TRUE)
remove.packages("subgroup", lib="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("~/Downloads/subgroup_0.3.tar.gz", repos = NULL, type = "source")
library("subgroup", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
library("subgroup", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
require(subgroup)
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401"),new("SDTaskConfig", method="sd-map", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="sd-map", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
require(subgroup)
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
require(subgroup)
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="sdmap", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
DiscoverSubgroupsByTask(task)
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="sdmap", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
library("subgroup", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="sdmap", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
?subgroup
DiscoverSubgroupsByTask(task)
# creating a task
data(credit.data)
task <- CreateSDTask(credit.data, as.target("class", "bad"))
taskNum <- CreateSDTask(credit.data, as.target("credit_amount"))
# running the tasks
DiscoverSubgroupsByTask(task)
DiscoverSubgroupsByTask(taskNum)
DiscoverSubgroupsByTask(task)
p <- read.arff("/home/geantvert/toto.arff")
require(arules)
?arules
?arule
data("Adult")
summary(Adult)
str(Adult)
rules <- apriori(Adult,
parameter = list(supp = 0.5, conf = 0.9,
target = "rules"))
rules <- apriori(Adult, parameter = list(supp = 0.5, conf = 0.9,target = "rules"))
?apriori
rules <- apriori(p, parameter = list(supp = 0.5, conf = 0.9,target = "rules"))
inspect(rules)
SCC324_319472775FEC20121231 <- read.delim("~/FEC/SCC324_319472775FEC20121231.csv", dec=",")
rules <- apriori(SCC324_319472775FEC20121231, parameter = list(supp = 0.5, conf = 0.9,target = "rules"))
toDelete <- c("Débit","Crédit", "Solde", "Chrono", "EcritureNum", "COUNT1")
toDelete <- c("Débit","Crédit", "Solde", "Chrono", "COUNT1")
SCC324_319472775FEC20121231 <- SCC324_319472775FEC20121231[,!(names(SCC324_319472775FEC20121231) %in% toDelete)]
namesToKeep <- sapply(SCC324_319472775FEC20121231,function(x) length(unique(x)))
SCC324_319472775FEC20121231 <- subset(SCC324_319472775FEC20121231, select=namesToKeep > 1)
col_names <- names(SCC324_319472775FEC20121231)
SCC324_319472775FEC20121231[,col_names] <- lapply(SCC324_319472775FEC20121231[,col_names] , factor)
rules <- apriori(SCC324_319472775FEC20121231, parameter = list(supp = 0.5, conf = 0.9,target = "rules"))
inspect(rules)
View(SCC324_319472775FEC20121231)
?subgroup
require(subgroup)
?subgroup
?subgroup
install.packages(c("multcomp", "mvtnorm", "rattle", "RGtk2", "Rttf2pt1", "TSP"))
require(arule)
?sample
?arule
require(arules)
?sample
sample
require(arulesViz)
?plot
require(subgroup)
task <- CreateSDTask("/home/geantvert/toto2.arff", as.target("C", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
require(subgroup)
task <- CreateSDTask("/home/geantvert/toto2.arff", as.target("C", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
library("Rcmdr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
library(doParallel)
registerDoParallel(cores=7)
require(foreign)
data <- read.arff("/home/geantvert/toto.arff")
View(data)
y <- data$F
vars(1:3)
vars <- c(1:3)
forest <- bigrfc(x, y, ntree=30L, varselect=vars)
require(bigrf)
forest <- bigrfc(x, y, ntree=30L, varselect=vars)
forest <- bigrfc(data, y, ntree=30L, varselect=vars)
?cor
require(foreign)
data <- read.arff("/home/geantvert/toto.arff")
cor(data)
cor(data, method = "kendall")
x <- (1,2,3,3,1)
x <- c(1,2,3,3,1)
x <- c("A","B","C","C","A")
x <- c(1,2,3,3,1)
y <- c("A","B","C","C","A")
cor(x,y)
cor(x,x)
cor(x,y, method = "kendall")
z <- c(1,2,3,3,4)
cor(x,z)
cor(x,x)
cor(x,z)
set.seed(1234)
X <- rep(c("A","B"),20)
Y <- sample(c("C","D"),40,replace=T)
table(X,Y)
Data <- as.data.frame(
matrix(
sample(letters[1:3],2000,replace=T),
ncol=25
)
)
View(Data)
columns <- c(3,7,11,24)
vars <- names(Data)[columns]
out <-  apply( combn(columns,2),2,function(x){
chisq.test(table(Data[,x[1]],Data[,x[2]]),correct=F)$p.value
})
out <- cbind(as.data.frame(t(combn(vars,2))),out)
View(out)
columns <- c(3,7,11,24)
columns <- c(1:25)
vars <- names(Data)[columns]
out <-  apply( combn(columns,2),2,function(x){
chisq.test(table(Data[,x[1]],Data[,x[2]]),correct=F)$p.value
})
out <- cbind(as.data.frame(t(combn(vars,2))),out)
warnings
warnings()
View(out)
Data[order(out),]
out[order(out),]
p<-out[order(out),]
View(p)
library(dplyr)
?arrange
arrange(out, out)
p <- arrange(out, out)
View(p)
out(c(7,18),)
out[c(7,18),]
Data[c(7,18),]
Data[,c(7,18)]
Data[,c(9,18)]
require(foreign)
data <- read.arff("/home/geantvert/toto.arff")
columns <- c(1:11)
vars <- names(data)[columns]
out <-  apply( combn(columns,2),2,function(x){
chisq.test(table(Data[,x[1]],data[,x[2]]),correct=F)$p.value
})
out <-  apply( combn(columns,2),2,function(x){
chisq.test(table(data[,x[1]],data[,x[2]]),correct=F)$p.value
})
rm(out)
out <-  apply( combn(columns,2),2,function(x){
chisq.test(table(data[,x[1]],data[,x[2]]),correct=F)$p.value
})
columns <- c(1:2)
vars <- names(data)[columns]
out <-  apply( combn(columns,2),2,function(x){
chisq.test(table(data[,x[1]],data[,x[2]]),correct=F)$p.value
})
GKtau <- function(x,y){
#
#  First, compute the IxJ contingency table between x and y
#
Nij = table(x,y,useNA="ifany")
#
#  Next, convert this table into a joint probability estimate
#
PIij = Nij/sum(Nij)
#
#  Compute the marginal probability estimates
#
PIiPlus = apply(PIij,MARGIN=1,sum)
PIPlusj = apply(PIij,MARGIN=2,sum)
#
#  Compute the marginal variation of y
#
Vy = 1 - sum(PIPlusj^2)
#
#  Compute the expected conditional variation of y given x
#
InnerSum = apply(PIij^2,MARGIN=1,sum)
VyBarx = 1 - sum(InnerSum/PIiPlus)
#
#  Compute and return Goodman and Kruskal's tau measure
#
tau = (Vy - VyBarx)/Vy
tau
}
set.seed(123)
u = runif(400)
x = round(u,digits=1)
letters = c(“A”, “B”, “C”, “D”, “E”, “F”, “G”, “H”, “I”, “J”, “K”)
c = letters[10*x+1]
letters = c("A", "B", "C", "D", "E")
c = letters[10*x+1]
install.packages("polycor")
library("polycor")
hetcor(data)
t <- hetcor(data, ML = False)
t <- hetcor(data, ML = FALSE)
require(foreign)
data <- read.arff("/home/geantvert/toto.arff")
require(foreign)
data <- read.arff("/home/geantvert/toto.arff")
require(foreign)
data <- read.arff("/home/geantvert/toto.arff")
task <- CreateSDTaskBis("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
library(subgroup)
task <- CreateSDTaskBis("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("CompteNum", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("C", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
task <- CreateSDTask("/home/geantvert/toto.arff", as.target("C", "401110"),new("SDTaskConfig", method="bsd", maxlen = 2, k = 100, minsize = 20, qf = "wracc", postfilter = "min-improve-set"))
d <- data[1:100,]
library(polychor)
library(polycor)
polychor(d)
hetcor(d)
u<-hetcor(d)
d <- data[1:100,1:2]
u<-hetcor(d)
set.seed(12345)
R <- matrix(0, 4, 4)
R[upper.tri(R)] <- runif(6)
diag(R) <- 1
R <- cov2cor(t(R) %*% R)
round(R, 4) # population correlations
data <- rmvnorm(1000, rep(0, 4), R)
?cov2cor
round(cor(data), 4) # sample correlations
x1 <- data[,1]
x2 <- data[,2]
y1 <- cut(data[,3], c(-Inf, .75, Inf))
y2 <- cut(data[,4], c(-Inf, -1, .5, 1.5, Inf))
data <- data.frame(x1, x2, y1, y2)
hetcor(data) # Pearson, polychoric, and polyserial correlations, 2-step est.
hetcor(x1, x2, y1, y2, ML=TRUE) # Pearson, polychoric, polyserial correlations, ML est.
View(R)
View(data)
?rmvnorm
d1 <- data[1:100,1]
d2 <- data[1:100,2]
hetcor(d1,d2)
d1 <- data[1:1000,1]
d2 <- data[1:100,2]
d2 <- data[1:1000,2]
hetcor(d1,d2)
d2 <- data[1:10000,2]
d1 <- data[1:10000,1]
hetcor(d1,d2)
d1 <- data[,1]
d2 <- data[,2]
hetcor(d1,d2)
hetcor(d2,d1)
hetcor(d1,d1)
d2 <- d1
hetcor(d2,d1)
d2 <- data[,2]
require(foreign)
data <- read.arff("/home/geantvert/toto.arff")
d1 <- data[,1]
d2 <- data[,2]
hetcor(d2,d1)
d1 <- data[1:10000,1]
d2 <- data[1:10000,2]
hetcor(d2,d1)
d2 <- data[1:1000,2]
d1 <- data[1:1000,1]
hetcor(d2,d1)
install.packages("hashFunction")
murmur3.32("salut")
library(hashFunction)
murmur3.32("salut")
murmur3.32("salut")
murmur3.32("salut")
murmur3.32("salut")
murmur3.32("salut")
murmur3.32("salut")
murmur3.32("salut")
murmur3.32("salut")
murmur3.32("salut")
murmur3.32("saluttoto")
?murmur3.32
cityhash.64("toto")
spooky.32("toutnnvnmnvnxc")
install.packages("PMA")
library(PMA)
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
install.packages("PMA")
library(PMA)
?PMA
SPC(data)
warnings()
# A simple simulated example
set.seed(1)
u <- matrix(c(rnorm(50), rep(0,150)),ncol=1)
v <- matrix(c(rnorm(75),rep(0,225)), ncol=1)
x <- u%*%t(v)+matrix(rnorm(200*300),ncol=300)
# Perform Sparse PCA - that is, decompose a matrix w/o penalty on rows
# and w/ L1 penalty on columns
# First, we perform sparse PCA and get 4 components, but we do not
# require subsequent components to be orthogonal to previous components
out <- SPC(x,sumabsv=3, K=4)
print(out,verbose=TRUE)
# We could have selected sumabsv by cross-validation, using function SPC.cv
# Now, we do sparse PCA using method in Section 3.2 of WT&H(2008) for getting
# multiple components - that is, we require components to be orthogonal
out.orth <- SPC(x,sumabsv=3, K=4, orth=TRUE)
print(out.orth,verbose=TRUE)
par(mfrow=c(1,1))
plot(out$u[,1], out.orth$u[,1], xlab="", ylab="")
# Note that the first components w/ and w/o orth option are identical,
# since the orth option only affects the way that subsequent components
# are found
print(round(t(out$u)%*%out$u,4)) # not orthogonal
print(round(t(out.orth$u)%*%out.orth$u,4)) # orthogonal
# Use SPC.cv to choose tuning parameters:
cv.out <- SPC.cv(x)
print(cv.out)
plot(cv.out)
out <- SPC(x, sumabsv=cv.out$bestsumabsv)
print(out)
# or we could do
out <- SPC(x, sumabsv=cv.out$bestsumabsv1se)
print(out)
View(x)
str(x)
# Generate 3 data sets so that first 25 features are correlated across
# the data sets...
u <- matrix(rnorm(50),ncol=1)
v1 <- matrix(c(rep(.5,25),rep(0,75)),ncol=1)
v2 <- matrix(c(rep(1,25),rep(0,25)),ncol=1)
v3 <- matrix(c(rep(.5,25),rep(0,175)),ncol=1)
x1 <- u%*%t(v1) + matrix(rnorm(50*100),ncol=100)
x2 <- u%*%t(v2) + matrix(rnorm(50*50),ncol=50)
x3 <- u%*%t(v3) + matrix(rnorm(50*200),ncol=200)
